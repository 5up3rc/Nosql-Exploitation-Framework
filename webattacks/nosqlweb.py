#working on webapps
from urlparse import urlparse,parse_qs
import requests
from requests import exceptions,Timeout
import time
from termcolor import colored
import urllib2

global method

def get_params(url,specify_params=False):
	"""
	Returns The Base URL,URL Parameters and Given URL

	"""
	if specify_params:
		params=specify_params.split(',')
		check_params = parseurl.split('&')
		x=set(check_params)
		y=set(params)
		requ_param=list(x.difference(y))
	else:
		params=[]
		parsed = urlparse(url)
		fun_params = parse_qs(parsed.query)
	for param in fun_params:
		params.append(param)
	return params

def construct_base_url(url):
	parser=urlparse(url)
	parseurl=parser.query
	base_url=parser.scheme+"://"+parser.netloc+parser.path
	return base_url
'''
def request_payload(url,params,param,payload):

	req_params=[]
	for i in params:
	    if 'q' in i[0]:
    		i=(i[0],payload)
    	req_params.append(i)
        query=urllib.urlencode(req_params)
        base=construct_base_url(url)
        final_url=base+query
	return len(request.get(final_url).content)
'''
def js_inject(url,base_url):
	
	#i=j=0
	#param=[]
	#respond=False
	#params=return_params(url)
	#base_len=len(requests.get(url).content)
	#print "Base Request Took %d Bytes"%(base_len)
	length=[]
	base_len=len(requests.get(url).content)
	params=get_params(url)
	file=open('payload/js_inject.txt','r')
	payloads = file.read().split('\n')

	for param in params:
		for payload in payloads:
			req_len=request_payload(url,params,param,payload)
			length.append(req_len)

	heur_max=max(length, key=lambda x:abs(x-base_len))
	heur_min=min(length, key=lambda x:abs(x-base_len))

	
	
	"""
	while(i<len(lines)):
		j=1
		for param in params:
			if (j==len(params)):
				parameter+=param+"="+lines[i]
			else:
				parameter+=param+"="+lines[i]+"&"
			j=j+1
	
		response=requests.get(base_url+"?"+parameter)
		check_len=len(response.content)
		print colored("[-] Checking %s"%(base_url+"?"+parameter),'yellow')
		print "\t [-] Request Took %d Bytes"%(check_len) 
		resp_len=len(response.content)-base_len
		#print resp_len
		if resp_len < 0:
			#resp=analyze_response(url)
			resp=False
			if(resp==True):
				print colored("[-] Page Didnt Respond Normally to query",'red')
				respond=True
		if abs(resp_len) >=50:
			print colored(" \t [-] Payload Returned Considerable Difference in Page.Try checking the page manually ",'green')
			print colored("\t [-] Check Url : "+base_url+"?"+parameter+"\n",'blue')
			respond=True
		i=i+1
		parameter=""
	if respond==False:
			print colored("\n[-] Page Showed Zero Difference with Payload List \n",'red')
	"""

def test(url):
	parser=urlparse(url)
	parseurl=parser.query
	base_url=parser.scheme+"://"+parser.netloc+parser.path
	original_param=[]
	param=""
	params = parseurl.split('&')
	for param in params:
		original_param.append(param.split('=')[1])
	return original_param

def nullcheck(url):
	"""
	Checks Parameters w/o any values and returns length of the body
	"""
	parameter=""
	base_url=construct_base_url(url)
	params=get_params(url)
	for param in params:
		parameter+=param+"=&"
	parameter=parameter.strip('&')
	response=requests.get(base_url+"?"+parameter)
	#print base_url+"?"+parameter
	noparamlen=len(response.content)
	return noparamlen
def time_check(url):
	return requests.get(url).elapsed.total_seconds()

def reflective_check(len):
	pass

def base_req_len(url):
	"""base_req = selected_param
	base_req += "a" """
	response=requests.get(url)
	len_base=len(response.content)
	return len_base


def attack_web_blind(url,payload_file,type_att=False):
	"""
	ADD: Multithreading to be added for huge payload list 
	"""
	i=j=0
	param=parameter=""
	respond=False
	noparamlen=nullcheck(url)
	base_url=construct_base_url(url)
	params=get_params(url)
	base_len=len(requests.get(url).content)
	file=open(payload_file,'r')
	lines = file.read().split('\n')
	#print lines
	if len(params) > 1:
		print colored("Multiple Params Detected.Checking ..",'blue')
	while(i<len(lines)):
		j=1
		if type_att=='js':
				#start_time=time.time()
			for param in params:
				if (j==len(params)):
					parameter+=param+"="+lines[i]
				else:
					parameter+=param+"="+lines[i]+"&"
				j=j+1
		else:
			for param in params:
				if (j==len(params)):
					parameter+=param+lines[i]+"=check"
				else:
					parameter+=param+lines[i]+"=check&"
				j=j+1
		if type_att=='js':
			#print base_url+"?"+parameter
			time=time_check(base_url+"?"+parameter)
			if float(time) > 3.5:
				print colored("[+] Time Based Injection Detected \n",'green')
				print colored("Check Url : "+base_url+"?"+parameter+"\n",'blue')
				respond=True
		response=requests.get(base_url+"?"+parameter)
		#print colored("[-] Checking %s"%(base_url+"?"+parameter),'yellow')
		resp_len=len(response.content)
		#if(resp_len-len(param)=)
		if resp_len < 0:
			print colored("[-] Page Didnt Respond Normally to query",'red')
			print colored("Check Url : "+base_url+"?"+parameter+"\n",'blue')
			respond=True
		if resp_len > base_len and resp_len > noparamlen:
			print colored("[-] Payload Returned Considerable Difference in Page.Try checking the page manually ",'green')
			print colored("Check Url : "+base_url+"?"+parameter+"\n",'blue')
			respond=True
		i=i+1
		parameter=""
	if respond==False:
			print colored("\n[-] Page Showed Zero Difference with Payload List \n",'red')

def attack(url,paramcheck=False):
	print colored("[-] Identifying Web APP Vulnerabilitties ",'green')
	base_url=construct_base_url(url)
	params=get_params(url)
	if len(params) == 0:
		print colored("[*] Parameters Not Given.Check URL\n",'red')
	else:
		print colored("[-] Identifyied Url Params",'green')
		for param in params:
			print colored("\t[-] %s"%(param),'blue')
		if paramcheck:
			specify_params=paramcheck.split(',')
			print colored("[-] Custom Parameter Specified",'green')
			if len(specify_params)==1:
				tmp=specify_params.pop()
				specify_params.insert(0,tmp)
				print colored("\t[-] %s"%(tmp),'blue')
			else:
				for param in specify_params:
					print colored("\t[-] %s"%(param),'blue')
		print colored("[+] Inject Custom Payload or Auto Load Payload (c/a)",'green')
		choice=raw_input()
		if choice=='c':
			print colored("[+] Enter Selected Parameter",'green')
			selected_param=raw_input()
			for param in params:
				tmp=param.split('=')[0]
				if selected_param==tmp:
					needed_param=param
					break
				else:
					print tmp
					print colored("[-] Parameter %s not available"%(selected_param),'red')
					sys.exit(0)
			print colored("[+] Enter Custom payload \n",'green')
			payload = raw_input()
			print colored("[+] Appending Payload to Parameter",'green')
			selected_param+="="
			len_base=base_req(base_url,selected_param)
			selected_param+=payload
			response=requests.get(base_url+"?"+selected_param)
			print colored("[-] Time Elapsed for the request : %s\n"%(response.elapsed),'green')
			print colored("[-] Checking Length of Base Payload Request withs Custom Payload Request \n",'yellow')
			custom_len = len(response.content)
			diff_len=custom_len-len_base
			print colored("[-] Page showed a Base Difference of %d bytes"%(custom_len-len_base),'green')
			if (diff_len>100):
				print colored("[-] Custom Payload Huge Difference.Try checking the page manually \n",'yellow')
			elif diff_len == len(payload):
				print colored("[-] Looks Like Payload Reflected Back\n.Plse check Manually \n",'green')

		elif choice=='a':
			len_base=base_req_len(url)
			print colored("[-] Taking Auto Payload List \n",'green')
			print colored("[!] Checking for Mongo Injection attacks \n",'yellow')
			attack_web_blind(url,'./payload/payload_mongo.txt')
			print colored("[!] Checking for Javascript injection attacks \n",'yellow')
			attack_web_blind(url,'./payload/js_time.txt','js')


def couch_web(url,base_url):
	print colored("\n[-] Checking for Couch Attacks \n",'green')
	i=j=0
	param=parameter=""
	respond=False
	params=get_params(url)
	base_len=len(requests.get(url).content)
	file=open('payload/payload_couch.txt','r')
	lines = file.read().split('\n')
	if len(param) > 1:
		print colored("Multiple Params Detected.Checking ..",'blue')
	while(i<len(lines)):
		j=1
		for param in params:
			if (j==len(params)):
				parameter+=param+"="+lines[i]
			else:
				parameter+=param+"="+lines[i]+"&"
			j=j+1
	
		response=requests.get(base_url+"?"+parameter)
		resp_len=len(response.content)-base_len
		if resp_len < 0:
			print colored("[-] Page Didnt Respond Normally to query",'red')
			respond=True
		if resp_len >=3:
			print colored("[-] Payload Returned Considerable Difference in Page.Try checking the page manually ",'green')
			print colored("Check Url : "+base_url+"?"+parameter+"\n",'blue')
			respond=True
		i=i+1
		parameter=""
	if respond==False:
			print colored("\n[-] Page Showed Zero Difference with Payload List \n",'red')
		


'''
def main():
		#url="http://localhost/nosqlwebapps/mongo_apps/demoes/userdata.php?usersearch=a"
		url="http://192.168.88.130:49090/?test=a"
		attack(url)
		k=test(url)
		print k
main()
'''
#base_url,param,url=return_required('http://localhost/nosqlwebapps/mongo_apps/login.php?userid=a&password=a')
#baseurl,param,url=return_required('http://192.168.88.130:49090/?test=a')
#print base_url
#print param
#print url
